// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sugar_model
Rcpp::List sugar_model(int ndays, std::vector<double> Temp, std::vector<double> PF, double HN0, double D0, double D00, double LR0, std::vector<double> RmN, std::vector<double> RmS, std::vector<double> RmR, std::vector<double> needles_R, std::vector<double> height_R, std::vector<double> wall_R, std::vector<double> roots_R, std::vector<double> use_R, std::vector<double> release_R, bool storage_grows, double mycorrhiza_threshold, std::vector<double> Ad0_R, std::vector<double> lambda_R, double Q10d, double Q10s, double carbon_sugar, double needles_mass, std::vector<double> common_R, std::vector<double> resistance_R);
RcppExport SEXP _CASSIA_sugar_model(SEXP ndaysSEXP, SEXP TempSEXP, SEXP PFSEXP, SEXP HN0SEXP, SEXP D0SEXP, SEXP D00SEXP, SEXP LR0SEXP, SEXP RmNSEXP, SEXP RmSSEXP, SEXP RmRSEXP, SEXP needles_RSEXP, SEXP height_RSEXP, SEXP wall_RSEXP, SEXP roots_RSEXP, SEXP use_RSEXP, SEXP release_RSEXP, SEXP storage_growsSEXP, SEXP mycorrhiza_thresholdSEXP, SEXP Ad0_RSEXP, SEXP lambda_RSEXP, SEXP Q10dSEXP, SEXP Q10sSEXP, SEXP carbon_sugarSEXP, SEXP needles_massSEXP, SEXP common_RSEXP, SEXP resistance_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ndays(ndaysSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Temp(TempSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type PF(PFSEXP);
    Rcpp::traits::input_parameter< double >::type HN0(HN0SEXP);
    Rcpp::traits::input_parameter< double >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< double >::type D00(D00SEXP);
    Rcpp::traits::input_parameter< double >::type LR0(LR0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type RmN(RmNSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type RmS(RmSSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type RmR(RmRSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type needles_R(needles_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type height_R(height_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wall_R(wall_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type roots_R(roots_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type use_R(use_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type release_R(release_RSEXP);
    Rcpp::traits::input_parameter< bool >::type storage_grows(storage_growsSEXP);
    Rcpp::traits::input_parameter< double >::type mycorrhiza_threshold(mycorrhiza_thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Ad0_R(Ad0_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lambda_R(lambda_RSEXP);
    Rcpp::traits::input_parameter< double >::type Q10d(Q10dSEXP);
    Rcpp::traits::input_parameter< double >::type Q10s(Q10sSEXP);
    Rcpp::traits::input_parameter< double >::type carbon_sugar(carbon_sugarSEXP);
    Rcpp::traits::input_parameter< double >::type needles_mass(needles_massSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type common_R(common_RSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type resistance_R(resistance_RSEXP);
    rcpp_result_gen = Rcpp::wrap(sugar_model(ndays, Temp, PF, HN0, D0, D00, LR0, RmN, RmS, RmR, needles_R, height_R, wall_R, roots_R, use_R, release_R, storage_grows, mycorrhiza_threshold, Ad0_R, lambda_R, Q10d, Q10s, carbon_sugar, needles_mass, common_R, resistance_R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CASSIA_sugar_model", (DL_FUNC) &_CASSIA_sugar_model, 26},
    {NULL, NULL, 0}
};

RcppExport void R_init_CASSIA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
